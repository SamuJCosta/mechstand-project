generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int        @id @default(autoincrement())
  name            String
  username        String     @unique(map: "User_username_key")
  email           String     @unique(map: "User_email_key")
  password        String
  role            String
  createdAt       DateTime   @default(now())
  refreshToken    String?
  profileImage    String?    @db.MediumText

  pecasCriadas         Peca[]       @relation("UserPecas")
  carros               Carro[]      @relation("ClienteCarros")
  anunciosCriados      Anuncio[]    @relation("UserAnuncios")
  clienteReparacoes    Reparacao[]  @relation("ClienteReparacoes")
  mecanicoReparacoes   Reparacao[]  @relation("MecanicoReparacoes")
  notificacoes         Notificacao[]
  avaliacoesFeitas     Avaliacao[]  @relation("ClienteAvaliacao")
  avaliacoesRecebidas  Avaliacao[]  @relation("MecanicoAvaliado")

}

enum Role {
  ADMIN
  CLIENT
  MECANICO
}

model Peca {
  id          Int      @id @default(autoincrement())
  nome        String
  descricao   String?
  quantidade  Int      @default(0)
  preco       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  criadoPor   user     @relation("UserPecas", fields: [criadoPorId], references: [id])
  criadoPorId Int
}

model Carro {
  id              Int       @id @default(autoincrement())
  matricula       String    @unique
  marca           String
  modelo          String  
  ano             Int
  tipoCombustivel String
  potencia        Int
  cilindrada      Int?
  quilometragem   Int
  imagemUrl       String?   @db.MediumText
  donoId          Int?
  dono            user?     @relation("ClienteCarros", fields: [donoId], references: [id])
  createdAt       DateTime  @default(now())

  anuncio         Anuncio?
  reparacoes      Reparacao[] @relation("CarroReparacoes")
}

model Anuncio {
  id           Int           @id @default(autoincrement())
  titulo       String
  descricao    String?       @db.Text 
  preco        Float
  carroId      Int           @unique
  carro        Carro         @relation(fields: [carroId], references: [id])
  criadoPorId  Int
  criadoPor    user          @relation("UserAnuncios", fields: [criadoPorId], references: [id])
  imagens      CarroImagem[]
  createdAt    DateTime      @default(now())
  status       String        @default("disponivel")
  venda        Venda?     
}

model CarroImagem {
  id         Int      @id @default(autoincrement())
  url        String   @db.MediumText
  anuncioId  Int
  anuncio    Anuncio  @relation(fields: [anuncioId], references: [id])
}

model Venda {
  id         Int       @id @default(autoincrement())
  anuncioId  Int       @unique
  anuncio    Anuncio   @relation(fields: [anuncioId], references: [id])
  valor      Float
  data       DateTime  @default(now())
}

model Reparacao {
  id             Int              @id @default(autoincrement())
  titulo         String
  descricao      String?
  dataDesejada   DateTime
  dataConfirmada DateTime?
  estado         EstadoReparacao @default(PENDENTE)

  clienteId      Int
  cliente        user             @relation("ClienteReparacoes", fields: [clienteId], references: [id])

  mecanicoId     Int?
  mecanico       user?            @relation("MecanicoReparacoes", fields: [mecanicoId], references: [id])

  carroId        Int?             // Opcional
  carro          Carro?           @relation("CarroReparacoes", fields: [carroId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  avaliacao      Avaliacao?

}

enum EstadoReparacao {
  PENDENTE
  ACEITE
  RECUSADA
  REAGENDAR
  CONCLUIDA
}

model Notificacao {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      user     @relation(fields: [userId], references: [id])
  mensagem  String
  lida      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Avaliacao {
  id           Int       @id @default(autoincrement())
  nota         Int
  comentario   String?   @db.Text
  clienteId    Int
  mecanicoId   Int
  reparacaoId  Int       @unique
  createdAt    DateTime  @default(now())

  cliente      user      @relation("ClienteAvaliacao", fields: [clienteId], references: [id])
  mecanico     user      @relation("MecanicoAvaliado", fields: [mecanicoId], references: [id])
  reparacao    Reparacao @relation(fields: [reparacaoId], references: [id])
}


